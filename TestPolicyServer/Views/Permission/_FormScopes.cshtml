@model PolicyServer1.Models.ScopePermission

<div x-data="ScopeManager(@Model.Scopes.ToJson())" x-init="fetchScopes('@Model.Resource?.Id')" x-on:resource-changed.window="fetchScopes($event.detail.id, true)">
	<div class="flex flex-row mb-2">
		<label asp-for="Scopes" class="font-bold mb-1 text-gray-700 block text-xs"></label>
		<span class="flex-auto"></span>
	</div>

	<div class="flex flex-row w-full">
		<ul class="flex-1 border border-gray-200 rounded-md m-5 ml-0 select-none overflow-y-auto h-48">
			<template x-for="(scope, index) in availableScopes" :key="index">
				<li x-on:click="toogleSelect(index, selectedAvailableScopes, $event)" x-bind:class="{'bg-blue-400': selectedAvailableScopes.indexOf(index) != -1}" class="pl-3 pr-4 py-3 flex items-center justify-between text-sm leading-5 hover:bg-blue-200">
					<span x-text="scope.displayName"></span>
				</li>
			</template>
		</ul>
		<div class="w-16 flex flex-col justify-center items-center">
			<button type="button" x-on:click="add()" class="mb-4 disabled:text-gray-400 text-blue-400 focus:outline-none" x-bind:disabled="selectedAvailableScopes.length == 0">
				<svg class="flex-shrink-0 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
					<use xlink:href="#arrow-outline-right"></use>
				</svg>
			</button>
			<button type="button" x-on:click="remove()" class="disabled:text-gray-400 text-blue-400 focus:outline-none" x-bind:disabled="selectedScopes.length == 0">
				<svg class="flex-shrink-0 h-5 w-5  " viewBox="0 0 20 20" fill="currentColor">
					<use xlink:href="#arrow-outline-left"></use>
				</svg>
			</button>
		</div>
		<ul class="flex-1 border border-gray-200 rounded-md m-5 mr-0 select-none overflow-y-auto h-48">
			<template x-for="(scope, index) in scopes" :key="index">
				<li x-on:click="toogleSelect(index, selectedScopes, $event)" x-bind:class="{'bg-blue-400': selectedScopes.indexOf(index) != -1}" class="pl-3 pr-4 py-3 flex items-center justify-between text-sm leading-5 hover:bg-blue-200">
					<span x-text="scope.displayName"></span>
				</li>
			</template>
		</ul>
		<div class="hidden">
			<template x-for="(scope, index) in scopes" :key="index">
				<div>
					@*<input type="hidden" x-bind:id="`Scopes[${index}].Id`" x-bind:name="`Scopes[${index}].Id`" x-bind:value="scope.id" />
					<input type="hidden" x-bind:id="`Scopes[${index}].Name`" x-bind:name="`Scopes[${index}].Name`" x-bind:value="scope.name" />
					<input type="hidden" x-bind:id="`Scopes[${index}].DisplayName`" x-bind:name="`Scopes[${index}].DisplayName`" x-bind:value="scope.displayName" />
					<input type="hidden" x-bind:id="`Scopes[${index}].IconUri`" x-bind:name="`Scopes[${index}].IconUri`" x-bind:value="scope.iconUri" />*@
					<input type="hidden" x-bind:id="`Scopes[${index}]`" x-bind:name="`Scopes[${index}]`" x-bind:value="scope.id" />
				</div>
			</template>
		</div>
	</div>
	<span asp-validation-for="Scopes" class="mt-2 text-sm text-red-800"></span>
</div>

<script>
	function ScopeManager(datas) {
		return {
			availableScopes: [],
			selectedAvailableScopes: [],
			scopes: datas.map(p => ({ id: p.Id, name: p.Name, displayName: p.DisplayName, iconUri: p.IconUri })) || [],
			selectedScopes: [],
			fetchScopes(guid, resetSelectedScopes = false) {
				this.availableScopes = [];

				if (resetSelectedScopes) {
					this.scopes = [];
				}

				if (guid != null && guid != '') {
					fetch(`/api/resource/${guid}`)
						.then(response => response.json())
						.then(json => {
							this.availableScopes = json.scopes
								.filter(p => this.scopes.find(a => a.id === p.id) == null)
								.map(p => ({ id: p.id, name: p.name, displayName: p.displayName, iconuri: p.iconUri })) || [];
						});
				}
			},
			add() {
				for (var i = this.selectedAvailableScopes.length - 1; i >= 0; --i) {
					var index = this.selectedAvailableScopes[i];
					var scope = this.availableScopes[index];
					this.availableScopes.splice(index, 1);
					this.scopes.push(scope);
				}
				this.selectedAvailableScopes.splice(0, this.selectedAvailableScopes.length);
			},
			remove() {
				for (var i = this.selectedScopes.length - 1; i >= 0; --i) {
					var index = this.selectedScopes[i];
					var scope = this.scopes[index];
					this.scopes.splice(index, 1);
					this.availableScopes.push(scope);
				}
				this.selectedScopes.splice(0, this.selectedScopes.length);
			},
			toogleSelect(item, list, event) {
				var index = list.indexOf(item);
				if (!event.ctrlKey) { list.splice(0, list.length); }

				if (index != -1) {
					list.splice(index, 1);
				} else {
					list.push(item);
				}
			}
		};
	}
</script>