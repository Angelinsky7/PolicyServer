// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PolicyServer1.EntityFramework.Storage.Datas;

namespace TestPolicyServer.Data.Migrations.PolicyServer
{
    [DbContext(typeof(PolicyDbContext))]
    [Migration("20200504101431_InitialPolicyServerMigration")]
    partial class InitialPolicyServerMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnalyseModeEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientUri")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("DecisionStrategy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionSplitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int>("PolicyEnforcement")
                        .HasColumnType("int");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ClientPolicyClient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientPolicyId");

                    b.ToTable("ClientPolicyClient");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.GroupPolicyGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupPolicyId");

                    b.ToTable("GroupPolicyGroup");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmAggregatedPolicyPolicy", b =>
                {
                    b.Property<Guid>("AggregatedPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AggregatedPolicyId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("AggregatedPolicyId", "PolicyId")
                        .IsUnique();

                    b.ToTable("MmAggregatedPolicyPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientPermission", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ClientId", "PermissionId")
                        .IsUnique();

                    b.ToTable("MmClientPermission");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientPolicy", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("ClientId", "PolicyId")
                        .IsUnique();

                    b.ToTable("MmClientPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientResource", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ClientId", "ResourceId")
                        .IsUnique();

                    b.ToTable("MmClientResource");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientRole", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ClientId", "RoleId")
                        .IsUnique();

                    b.ToTable("MmClientRole");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientScope", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ClientId", "ScopeId")
                        .IsUnique();

                    b.ToTable("MmClientScope");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmPermissionPolicy", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("PermissionId", "PolicyId")
                        .IsUnique();

                    b.ToTable("MmPermissionPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmResourceScope", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResourceId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ResourceId", "ScopeId")
                        .IsUnique();

                    b.ToTable("MmResourceScope");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmRolePolicyRole", b =>
                {
                    b.Property<Guid>("RolePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolePolicyId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolePolicyId", "RoleId")
                        .IsUnique();

                    b.ToTable("MmRolePolicyRole");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmRoleRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "ParentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoleId", "ParentId")
                        .IsUnique();

                    b.ToTable("MmRoleRole");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmScopePermissionScope", b =>
                {
                    b.Property<Guid>("ScopePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScopePermissionId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ScopePermissionId", "ScopeId")
                        .IsUnique();

                    b.ToTable("MmScopePermissionScope");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("DecisionStrategy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasDiscriminator<string>("PermissionType").HasValue("Permission");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<int>("Logic")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Policy");

                    b.HasDiscriminator<string>("PolicyType").HasValue("Policy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IconUri")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ResourceUri", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ResouceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResouceId");

                    b.ToTable("ResourceUri");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IconUri")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Scope");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.Secret", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Secret");

                    b.HasDiscriminator<string>("SecretType").HasValue("Secret");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.TimePolicyRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TimePolicyRange");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.UserPolicyUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("UserPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserPolicyId");

                    b.ToTable("UserPolicyUser");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ResourcePermission", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Permission");

                    b.Property<string>("ResouceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ResourceId");

                    b.HasDiscriminator().HasValue("ResourcePermission");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ScopePermission", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Permission");

                    b.Property<Guid>("ResourceId")
                        .HasColumnName("ScopePermission_ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ResourceId");

                    b.HasDiscriminator().HasValue("ScopePermission");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.AggregatedPolicy", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Policy");

                    b.Property<int>("DecisionStrategy")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AggregatedPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ClientPolicy", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Policy");

                    b.HasDiscriminator().HasValue("ClientPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.GroupPolicy", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Policy");

                    b.HasDiscriminator().HasValue("GroupPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.RolePolicy", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Policy");

                    b.HasDiscriminator().HasValue("RolePolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Policy");

                    b.Property<long?>("DayOfMonthId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HourId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinuteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MonthId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("NotBefore")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NotOnOrAfter")
                        .HasColumnType("datetime2");

                    b.Property<long?>("YearId")
                        .HasColumnType("bigint");

                    b.HasIndex("DayOfMonthId")
                        .IsUnique()
                        .HasFilter("[DayOfMonthId] IS NOT NULL");

                    b.HasIndex("HourId")
                        .IsUnique()
                        .HasFilter("[HourId] IS NOT NULL");

                    b.HasIndex("MinuteId")
                        .IsUnique()
                        .HasFilter("[MinuteId] IS NOT NULL");

                    b.HasIndex("MonthId")
                        .IsUnique()
                        .HasFilter("[MonthId] IS NOT NULL");

                    b.HasIndex("YearId")
                        .IsUnique()
                        .HasFilter("[YearId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("TimePolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.UserPolicy", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Policy");

                    b.HasDiscriminator().HasValue("UserPolicy");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ClientSecret", b =>
                {
                    b.HasBaseType("PolicyServer1.EntityFramework.Storage.Entities.Secret");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("ClientSecret");
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ClientPolicyClient", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.ClientPolicy", "ClientPolicy")
                        .WithMany("Users")
                        .HasForeignKey("ClientPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.GroupPolicyGroup", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.GroupPolicy", "GroupPolicy")
                        .WithMany("Groups")
                        .HasForeignKey("GroupPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmAggregatedPolicyPolicy", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.AggregatedPolicy", "AggregatedPolicy")
                        .WithMany("Policies")
                        .HasForeignKey("AggregatedPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientPermission", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Client", "Client")
                        .WithMany("Permissions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientPolicy", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Client", "Client")
                        .WithMany("Policies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientResource", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Client", "Client")
                        .WithMany("Resources")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientRole", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Client", "Client")
                        .WithMany("Roles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmClientScope", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Client", "Client")
                        .WithMany("Scopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmPermissionPolicy", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Permission", "Permission")
                        .WithMany("Policies")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmResourceScope", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Resource", "Resource")
                        .WithMany("Scopes")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmRolePolicyRole", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.RolePolicy", "RolePolicy")
                        .WithMany("Roles")
                        .HasForeignKey("RolePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmRoleRole", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Role", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Role", "Role")
                        .WithMany("Parents")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.MmScopePermissionScope", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.ScopePermission", "ScopePermission")
                        .WithMany("Scopes")
                        .HasForeignKey("ScopePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ResourceUri", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Resource", "Resource")
                        .WithMany("Uris")
                        .HasForeignKey("ResouceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.UserPolicyUser", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.UserPolicy", "UserPolicy")
                        .WithMany("Users")
                        .HasForeignKey("UserPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ResourcePermission", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ScopePermission", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.TimePolicyRange", "DayOfMonth")
                        .WithOne()
                        .HasForeignKey("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", "DayOfMonthId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.TimePolicyRange", "Hour")
                        .WithOne()
                        .HasForeignKey("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", "HourId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.TimePolicyRange", "Minute")
                        .WithOne()
                        .HasForeignKey("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", "MinuteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.TimePolicyRange", "Month")
                        .WithOne()
                        .HasForeignKey("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", "MonthId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.TimePolicyRange", "Year")
                        .WithOne()
                        .HasForeignKey("PolicyServer1.EntityFramework.Storage.Entities.TimePolicy", "YearId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PolicyServer1.EntityFramework.Storage.Entities.ClientSecret", b =>
                {
                    b.HasOne("PolicyServer1.EntityFramework.Storage.Entities.Client", "Client")
                        .WithMany("Secrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
